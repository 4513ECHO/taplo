$schema: http://json-schema.org/draft-07/schema#
definitions:
  Poetry:
    title: Poetry
    description: |
      Configuration for [Poetry](https://python-poetry.org/).
    evenBetterToml:
      links:
        key: https://python-poetry.org/docs/pyproject/
    type: object
    required:
      - name
      - version
      - description
      - authors
    properties:
      name:
        type: string
        description: |
          The name of the package.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#name
      description:
        type: string
        description: |
          A short description of the package.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#description
      version:
        type: string
        description: |
          The version of the package.

          This should follow [semantic versioning](https://semver.org). However it will not be enforced and you remain free to follow another specification.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#version
      license:
        type: string
        description: |
          The license of the package.

          The recommended notation for the most common licenses is (alphabetical):
          - Apache-2.0
          - BSD-2-Clause
          - BSD-3-Clause
          - BSD-4-Clause
          - GPL-2.0-only
          - GPL-2.0-or-later
          - GPL-3.0-only
          - GPL-3.0-or-later
          - LGPL-2.1-only
          - LGPL-2.1-or-later
          - LGPL-3.0-only
          - LGPL-3.0-or-later
          - MIT

          Optional, but it is highly recommended to supply this.

          If your project is proprietary and does not use a specific licence, you can set this value as Proprietary.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#license
      authors:
        type: array
        description: |
          The authors of the package.

          This is a list of authors and should contain at least one author. Authors must be in the form `name <email>`.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#authors
        items:
          type: string
          pattern: ^.*\s(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
      maintainers:
        type: array
        description: |
          The maintainers of the package. 

          This is a list of maintainers and should be distinct from authors. Maintainers may contain an email and be in the form `name <email>`.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#maintainers
        items:
          type: string
          pattern: ^.*\s(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
      readme:
        type: string
        description: |
          The readme file of the package.
          The file could be either `README.rst` or `README.md`.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#readme
      homepage:
        type: string
        description: |
          An URL to the website of the project.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#homepage
      repository:
        type: string
        description: |
          An URL to the repository of the project.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#repository
      documentation:
        type: string
        description: |
          An URL to the documentation of the project.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#documentation
      keywords:
        type: array
        description: |
          A list of keywords (max: 5) that the package is related to.
        items:
          type: string
        maxItems: 5
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#keywords
      classifiers:
        type: array
        description: |
          A list of PyPI [trove classifiers](https://pypi.org/classifiers/) that describe the project. 

          ```toml
          [tool.poetry]
          # ...
          classifiers = [
              "Topic :: Software Development :: Build Tools",
              "Topic :: Software Development :: Libraries :: Python Modules"
          ]

          Note that Python classifiers are still automatically added for you and are determined by your `python` requirement.

          The `license` property will also set the License classifier automatically.
          ```
        items:
          type: string
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#classifiers
      packages:
        type: array
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#packages
        description: |
          A list of packages and modules to include in the final distribution.

          If your project structure differs from the standard one supported by poetry, you can specify the packages you want to include in the final distribution.

          ```toml
          [tool.poetry]
          # ...
          packages = [
              { include = "my_package" },
              { include = "extra_package/**/*.py" },
          ]

          If your package is stored inside a "source" directory, you must specify it:

          ```toml
          [tool.poetry]
          # ...
          packages = [
              { include = "my_package", from = "lib" },
          ]
          ```

          If you want to restrict a package to a specific build format you can specify it by using `format`:

          ```toml
          [tool.poetry]
          # ...
          packages = [
              { include = "my_package" },
              { include = "my_other_package", format = "sdist" },
          ]
          ```

          Using `packages` disables the package auto-detection feature meaning you have to explicitly specify the "default" package.

          Poetry is clever enough to detect Python subpackages.

          Thus, you only have to specify the directory where your root package resides.
          ```
        items:
          $ref: "#/definitions/Package"
      include:
        type: array
        description: |
          A list of patterns that will be included in the final package.

          You can explicitly specify to Poetry that a set of globs should be ignored or included for the purposes of packaging.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#include-and-exclude
        items:
          type: string
      exclude:
        type: array
        description: |
          A list of patterns that will excluded from the final package.

          The globs specified in the exclude field identify a set of files that are not included when a package is built.

          If a VCS is being used for a package, the exclude field will be seeded with the VCSâ€™ ignore settings (`.gitignore` for git for example).
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#include-and-exclude
        items:
          type: string
      dependencies:
        type: object
        description: The dependencies of the package.

          Poetry is configured to look for dependencies on PyPi by default. Only the name and a version string are required in this case.

        required:
          - python
        properties:
          python:
            type: string
            default: "^3"
            pattern: "^((((>=|>|<|=|\\^|~)?\\s*[0-9]+(.[0-9]+)?(.[0-9]+)?|([0-9]+|\\*)(.([0-9]+|\\*))?(.([0-9]+|\\*))?)+)(,\\s*(((>=|>|<|=|\\^|~)?\\s*[0-9]+(.[0-9]+)?(.[0-9]+)?|([0-9]+|\\*)(.([0-9]+|\\*))?(.([0-9]+|\\*))?)))*|(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)$"
        additionalProperties:
          type: string
          pattern: "^((((>=|>|<|=|\\^|~)?\\s*[0-9]+(.[0-9]+)?(.[0-9]+)?|([0-9]+|\\*)(.([0-9]+|\\*))?(.([0-9]+|\\*))?)+)(,\\s*(((>=|>|<|=|\\^|~)?\\s*[0-9]+(.[0-9]+)?(.[0-9]+)?|([0-9]+|\\*)(.([0-9]+|\\*))?(.([0-9]+|\\*))?)))*|(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)$"
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#dependencies-and-dev-dependencies
      dev-dependencies:
        type: object
        description: The dev-dependencies of the package.

          Poetry is configured to look for dependencies on PyPi by default. Only the name and a version string are required in this case.
        required:
          - python
        properties:
          python:
            type: string
        additionalProperties:
          type: string
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#dependencies-and-dev-dependencies
      source:
        type: array
        description: |
          Additional sources of dependencies.
        items:
          type: object
          description: A dependency source.
          required:
            - name
            - url
          properties:
            name:
              type: string
              description: The name of the source.
            url:
              type: string
              description: The source URL.
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#dependencies-and-dev-dependencies
      scripts:
        type: object
        description:
          Scripts or executable that will be installed when installing the package.

          ```toml
          [tool.poetry.scripts]
          poetry = 'poetry.console:run'
          ```

          Here, we will have the poetry script installed which will execute `console.run` in the `poetry` package.
        additionalProperties:
          type: string
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#scripts
      extras:
        type: object
        description: |
          Poetry supports extras to allow expression of:
          - optional dependencies, which enhance a package, but are not required; and
          - clusters of optional dependencies.

          ```toml          
          [tool.poetry]
          name = "awesome"

          [tool.poetry.dependencies]
          # These packages are mandatory and form the core of this packageâ€™s distribution.
          mandatory = "^1.0"

          # A list of all of the optional dependencies, some of which are included in the
          # below `extras`. They can be opted into by apps.
          psycopg2 = { version = "^2.7", optional = true }
          mysqlclient = { version = "^1.3", optional = true }

          [tool.poetry.extras]
          mysql = ["mysqlclient"]
          pgsql = ["psycopg2"]
          ```

          When installing packages, you can specify extras by using the `-E|--extras` option:
          ```
          poetry install --extras "mysql pgsql"
          poetry install -E mysql -E pgsql
          ```
        additionalProperties:
          type: array
          items:
            type: string
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#extras
      plugins:
        type: object
        description: |
          Poetry supports arbitrary plugins which work similarly to setuptools entry points. To match the example in the setuptools documentation, you would use the following:
          ```toml
          [tool.poetry.plugins] # Optional super table

          [tool.poetry.plugins."blogtool.parsers"]
          ".rst" = "some_module:SomeClass"          
          ```
        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#plugins
        additionalProperties:
          type: object
          additionalProperties:
            type: string
      urls:
        type: object
        description: |
          In addition to the basic urls (homepage, repository and documentation), you can specify any custom url in the urls section.

          ```toml
          [tool.poetry.urls]
          "Bug Tracker" = "https://github.com/python-poetry/poetry/issues"
          ```

          If you publish you package on PyPI, they will appear in the `Project Links` section.
        additionalProperties:
          type: string

        evenBetterToml:
          links:
            key: https://python-poetry.org/docs/pyproject/#urls
  BuildSystem:
    title: Build System
    type: object
    evenBetterToml:
      links:
        key: https://www.python.org/dev/peps/pep-0518/#build-system-table
    description: |
      Build-related data.
    required:
      - requires
    properties:
      requires:
        description: |
          A list of strings representing [PEP 508](https://www.python.org/dev/peps/pep-0508) dependencies required to execute the build system.
        type: array
        items:
          type: string
        evenBetterToml:
          links:
            key: https://www.python.org/dev/peps/pep-0518/#build-system-table
      build-backend:
        description: |
          The build backend for the package.
        type: string
        evenBetterToml:
          links:
            key: https://www.python.org/dev/peps/pep-0517/
  Package:
    title: Package
    type: object
    description: |
      A package to include with Poetry.
    required:
      - include
    properties:
      include:
        description: |
          A package name or glob pattern to the package.
        type: string
      from:
        description: |
          The directory of the package.
        type: string
      format:
        description: |
          Build format for the package.
        type: string
type: object
properties:
  build-system:
    $ref: "#/definitions/BuildSystem"
  tool:
    type: object
    description: |
      A table for tool configurations.

      Every tool that is used by the project can have its own sub-table for its configuration.
    additionalProperties: true
    evenBetterToml:
      links:
        key: https://www.python.org/dev/peps/pep-0518/#id28
    properties:
      poetry:
        $ref: "#/definitions/Poetry"

additionalProperties: true
