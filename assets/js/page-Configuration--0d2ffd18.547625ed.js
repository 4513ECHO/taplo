(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{466:function(t,e,a){"use strict";a.r(e);var s=a(2),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),a("h2",{attrs:{id:"configuration-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-file"}},[t._v("#")]),t._v(" Configuration File")]),t._v(" "),a("p",[t._v("Taplo supports configuration via file, unsurprisingly it uses the TOML format.")]),t._v(" "),a("p",[t._v("By default, every tool looks for one in the working directory or the root of the workspace by the following names (in precedence order):")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".taplo.toml")])]),t._v(" "),a("li",[a("code",[t._v("taplo.toml")])])]),t._v(" "),a("h3",{attrs:{id:"include"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#include"}},[t._v("#")]),t._v(" Include")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("include")]),t._v(" property is an array of "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Glob_(programming)",target:"_blank",rel:"noopener noreferrer"}},[t._v("glob"),a("OutboundLink")],1),t._v(" path strings that are relative to the working directory (or root of the workspace),\nthe matched files are included in the operations by the tools unless explicitly overwritten. The pattern supports globstars ("),a("code",[t._v("**")]),t._v(") for recursive search.")]),t._v(" "),a("p",[t._v("If this property is omitted, "),a("code",[t._v("TOML")]),t._v(" files will be searched in the entry child directory tree, however if it is present but "),a("strong",[t._v("empty")]),t._v(", "),a("strong",[t._v("no files will be included")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cargo.toml"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some_directory/**/*.toml"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"exclude"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exclude"}},[t._v("#")]),t._v(" Exclude")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("exclude")]),t._v(" property has the same semantics as "),a("code",[t._v("include")]),t._v(" and takes precedence over it.")]),t._v(" "),a("p",[t._v("The following will exclude "),a("code",[t._v("Cargo.toml")]),t._v(" from the includes written above, so files matching "),a("code",[t._v("some_directory/**/*.toml")]),t._v(" will be included only.")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("exclude")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cargo.toml"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"formatting-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#formatting-options"}},[t._v("#")]),t._v(" Formatting Options")]),t._v(" "),a("p",[t._v("The following options are used by the formatter, all of them are optional.\nThe given example values are used by default.")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("formatting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Align consecutive entries vertically.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("align_entries")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Append trailing commas for multi-line arrays.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("array_trailing_comma")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expand arrays to multiple lines that exceed the maximum column width.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("array_auto_expand")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Collapse arrays that don't exceed the maximum column width and don't contain comments.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("array_auto_collapse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Omit white space padding from single-line arrays")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("compact_arrays")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Omit white space padding from the start and end of inline tables.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("compact_inline_tables")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Maximum column width in characters, affects array expansion and collapse, this doesn't take whitespace into account.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that this is not set in stone, and works on a best-effort basis.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("column_width")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indent based on tables and arrays of tables and their subtables, subtables out of order are not indented.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("indent_tables")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The substring that is used for indentation, should be tabs or spaces (but technically can be anything).")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("indent_string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  '")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add trailing newline at the end of the file if not present.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("trailing_newline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Alphabetically reorder keys that are not separated by empty lines.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("reorder_keys")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Maximum amount of allowed consecutive blank lines. This does not affect the whitespace at the end of the document, as it is always stripped.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("allowed_blank_lines")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Use CRLF for line endings.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("crlf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("h3",{attrs:{id:"schema"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema"}},[t._v("#")]),t._v(" Schema")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("schema")]),t._v(" table consists of only two keys:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("path")]),t._v(": the path of the schema, this can be either path to a local file path or an URL with the schemes "),a("code",[t._v("taplo")]),t._v(", "),a("code",[t._v("http")]),t._v(" or "),a("code",[t._v("https")]),t._v(". ("),a("code",[t._v("file")]),t._v(" scheme is also accepted, it is the same as specifying a local path)")]),t._v(" "),a("li",[a("code",[t._v("enabled")]),t._v(": whether to enable the schema or not ("),a("code",[t._v("true")]),t._v(" if omitted).")])]),t._v(" "),a("p",[t._v("An example:")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("schema")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("path")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./path/to/schema.json"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("enabled")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("Or a configuration that uses a built-in schema:")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("schema")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("path")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"taplo://cargo@Cargo.toml"')]),t._v("\n")])])]),a("h3",{attrs:{id:"rules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rules"}},[t._v("#")]),t._v(" Rules")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("rule")]),t._v(" array of tables consist of rules that overwrite the above configuration based on some conditions.\nThus it has the same "),a("code",[t._v("formatting")]),t._v(" and "),a("code",[t._v("schema")]),t._v(" settings, and the "),a("code",[t._v("include")]),t._v(" and "),a("code",[t._v("exclude")]),t._v(" with the same semantics as their "),a("a",{attrs:{href:"#include"}},[t._v("global variants")]),t._v(", however this time they are used to determine whether the rule applies.")]),t._v(" "),a("p",[t._v("Additionally, "),a("code",[t._v("keys")]),t._v(" of a rule is an array of dotted keys that scope the rule to a specific part within a single document.\nThe keys also support glob patterns.")]),t._v(" "),a("p",[a("em",[t._v("In case of overlapping rules, the last defined rule is used.")])]),t._v(" "),a("p",[t._v("Let's say we want to sort our "),a("code",[t._v("Cargo")]),t._v(" dependencies, but nothing else, here is how we would do that:")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("formatting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("reorder_keys")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("rule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**/Cargo.toml"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("keys")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dependencies"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("rule.formatting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("reorder_keys")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("h2",{attrs:{id:"schemas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schemas"}},[t._v("#")]),t._v(" Schemas")]),t._v(" "),a("p",[t._v("The CLI and the VSCode extension supports additional completion, validation and other features based on "),a("a",{attrs:{href:"https://json-schema.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON schemas"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"built-in-schemas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#built-in-schemas"}},[t._v("#")]),t._v(" Built-in Schemas")]),t._v(" "),a("p",[t._v("Several schemas are baked into the CLI tool and the VSCode extension, you can view them "),a("a",{attrs:{href:"https://github.com/tamasfe/taplo/tree/master/schemas",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"cargo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cargo"}},[t._v("#")]),t._v(" Cargo")]),t._v(" "),a("p",[a("em",[t._v("URI: "),a("code",[t._v("taplo://cargo@Cargo.toml")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://doc.rust-lang.org/cargo/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cargo"),a("OutboundLink")],1),t._v(", the package manager and build tool for Rust uses TOML for configuration, most of "),a("code",[t._v("Cargo.toml")]),t._v(" is covered with type-information and documentation.")]),t._v(" "),a("h4",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[t._v("#")]),t._v(" Python")]),t._v(" "),a("p",[a("em",[t._v("URI: "),a("code",[t._v("taplo://python@pyproject.toml")])])]),t._v(" "),a("p",[t._v("The python configuration file "),a("code",[t._v("pyproject.toml")]),t._v(" described by "),a("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0621/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 621"),a("OutboundLink")],1),t._v(" is also supported.")]),t._v(" "),a("p",[t._v("The following tool configurations are currently known by the schema:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://python-poetry.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Poetry"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"taplo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taplo"}},[t._v("#")]),t._v(" Taplo")]),t._v(" "),a("p",[a("em",[t._v("URI: "),a("code",[t._v("taplo://taplo@taplo.toml")])])]),t._v(" "),a("p",[t._v("For the configuration of the tool itself.")]),t._v(" "),a("h3",{attrs:{id:"writing-custom-schemas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-custom-schemas"}},[t._v("#")]),t._v(" Writing Custom Schemas")]),t._v(" "),a("p",[t._v("You can use your own schemas while working with Taplo. "),a("strong",[t._v("Only JSON format is supported")]),t._v(", schemas written in YAML and other formats must be converted.")]),t._v(" "),a("p",[t._v("Submitting schemas is highly appreciated, to submit a schema, open an issue "),a("a",{attrs:{href:"https://github.com/tamasfe/taplo/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("on GitHub"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"limitations-and-unimplemented-features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limitations-and-unimplemented-features"}},[t._v("#")]),t._v(" Limitations and Unimplemented Features")]),t._v(" "),a("p",[t._v("Only a subset of JSON schema is supported for now with the following rules:")]),t._v(" "),a("ul",[a("li",[t._v("No external references are allowed in a schema, meaning that a single "),a("code",[t._v("json")]),t._v(" file must contain the entire schema with all of its subschemas.")]),t._v(" "),a("li",[t._v("Parsing JSON pointers is not implemented, and they will not work.")]),t._v(" "),a("li",[t._v("The only allowed references must point to subschemas in the "),a("code",[t._v("definitions")]),t._v(" of the root of the schema.")])]),t._v(" "),a("p",[t._v("These limitations are likely to be lifted in the future.")]),t._v(" "),a("p",[t._v("For more information about bugs and missing features check the "),a("a",{attrs:{href:"https://github.com/tamasfe/taplo/labels/schema",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"schema-extension"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema-extension"}},[t._v("#")]),t._v(" Schema Extension")]),t._v(" "),a("p",[t._v("Every schema object can have an extension with the key "),a("code",[t._v("evenBetterToml")]),t._v(" that will be parsed by Taplo to provide additional hints and features.")]),t._v(" "),a("p",[t._v("All the properties are optional. Here's an example object that has all the properties of the schema extension:")]),t._v(" "),a("div",{staticClass:"language-json5 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json5"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My Schema"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"enum"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"default"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// All the keys in the extension are optional.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evenBetterToml"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hide the schema from completion and similar hints.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hidden"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"docs"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Main documentation for the schema, it is expected to be markdown.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If this is omitted, the description will be used.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"main"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is [My Schema](https://example.com/mySchema)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Documentation of the enum values, these are used when selecting")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the values completion or hovering over them.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These are selected by matching the indices of the enum values.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a value doesn't have documentation in the middle of the array,")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null can be used instead of a string.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"enumValues"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Documentation of 'one'.\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Documentation of 'three'.\"")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The documentation of the default value, same as the enum docs.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"defaultValue"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Documentation of 'one'.\"")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"links"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// An URL the key will point to if the schema is part of a table.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://example.com/mySchema"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Different enum values can also have URLs they will point to.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The rules are the same as enum docs.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"enumValues"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("                 \n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://example.com/one"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://example.com/two"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If the schema is an object, we can hint what")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fields are typically important.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These will be created automatically along with")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the required properties during autocompletion.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"initKeys"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"importantKey"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The extension field can also appear alongside "),a("code",[t._v("$ref")]),t._v("s, in that case it is carried over to the referenced schema overriding its extension if there's any during parsing. This is useful if the same schema has different meanings in different contexts.")]),t._v(" "),a("h3",{attrs:{id:"using-schemas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-schemas"}},[t._v("#")]),t._v(" Using Schemas")]),t._v(" "),a("h4",{attrs:{id:"visual-studio-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#visual-studio-code"}},[t._v("#")]),t._v(" Visual Studio Code")]),t._v(" "),a("p",[t._v("Schemas can be associated to files in the "),a("code",[t._v("evenBetterToml.schema.associations")]),t._v(" configuration object.")]),t._v(" "),a("p",[t._v("In order to associate files with their correct schemas a table of regex patterns and schema URIs is used.")]),t._v(" "),a("ul",[a("li",[t._v("The key must be a regex pattern for an absolute document URI.")]),t._v(" "),a("li",[t._v("The value can be either an absolute URI to the schema, or a path relative to the root of the workspace.")])]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language-json5 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json5"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// The following will match all documents ending with "test.toml", and use the "test.json" schema')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in the root of the workspace.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// The relative path must start with "./" and it cannot be omitted.')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('".*test\\\\.toml"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./test.json"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The following will only match a single specific file with a specific schema:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file:///path/to/the/file.toml"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file:///path/to/the/schema.json"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Currently supported schemes for the schema URIs:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("file")]),t._v(": a local file")]),t._v(" "),a("li",[a("code",[t._v("taplo")]),t._v(": a built-in schema bundled with the extension")]),t._v(" "),a("li",[a("code",[t._v("http")]),t._v(", "),a("code",[t._v("https")]),t._v(": a remote schema that can be fetched with a "),a("code",[t._v("GET")]),t._v(" request without authentication supported")])]),t._v(" "),a("h4",{attrs:{id:"taplo-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taplo-cli"}},[t._v("#")]),t._v(" Taplo CLI")]),t._v(" "),a("p",[t._v("The CLI supports the "),a("code",[t._v("-s")]),t._v(" or "),a("code",[t._v("--schema")]),t._v(" flag for linting, it also supports schemas in the "),a("a",{attrs:{href:"#configuration-file"}},[t._v("configuration file")]),t._v(". For more information, visit "),a("RouterLink",{attrs:{to:"/cli/#linting"}},[t._v("the cli docs")]),t._v(".")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);