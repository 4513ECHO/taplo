on:
  push:
    branches:
      - master
    tags:
      - release-lib-*
      - release-vscode-*
  pull_request:
    branches:
      - master

name: Continuous integration

jobs:
  test_gen:
    name: TOML Test Generation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run test generator
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path=test-gen/Cargo.toml -- -i test-data -o taplo/src/tests/
      - name: Upload generated tests
        uses: actions/upload-artifact@v1
        with:
          name: generated_tests
          path: taplo/src/tests/generated

  test:
    name: Cargo Test
    needs: test_gen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Download generated tests
        uses: actions/download-artifact@v1
        with:
          name: generated_tests
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install Clippy
        run: rustup component add clippy
      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  # Run on tags like "release-lib-1.0.0-alpha.1"
  publish_taplo_crate:
    name: Publish Taplo Crate
    needs: test
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/release-lib-')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Retrieve release version
        run: echo "::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF#refs/tags/release-lib-})"
      - name: Set release version in Cargo.toml
        run: |
          awk 'NR==1,/version\s*=.*/{sub(/version\s*=.*/, "version = \"'${RELEASE_VERSION}'\"")} 1' taplo/Cargo.toml > cargo_tmp
          mv cargo_tmp taplo/Cargo.toml
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Publish to Crates.io
        run: cargo publish --allow-dirty --token $CRATES_IO_TOKEN
        working-directory: taplo
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  # Run on tags like "release-vscode-1.0.0-alpha.1"
  publish_vscode_ext:
    name: Publish VSCode Extension
    needs: test
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/release-vscode-')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Retrieve release version
        run: echo "::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF#refs/tags/release-vscode-})"
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install WASM Pack
        uses: jetli/wasm-pack-action@v0.3.0
      - name: Build WASM LSP
        run: wasm-pack build --target nodejs
        working-directory: taplo-ide
      - name: Extension NPM Install
        run: npm i
        working-directory: taplo-ide/vscode
      - name: Install vsce
        run: npm install -g vsce
      - name: Publish Extension
        run: vsce publish --baseImagesUrl https://raw.githubusercontent.com/tamasfe/taplo/master/taplo-ide/vscode/images -p $VSCE_TOKEN $RELEASE_VERSION
        working-directory: taplo-ide/vscode
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
